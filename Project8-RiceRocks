Rice Python Class - RiceRocks

http://www.codeskulptor.org/#user27_phs4NK62yxVplLT.py


# Mini-project #8 - RiceRocks - An Asteroid Game
#
# Interactive Python Course
# RICE University - coursera.org
#
# Ron Buning
#
# Program runs best in Google Chrome browser.

#
# Import required Python libraries
#

import simplegui, math, random


#
# Define global variables for program
#

WIDTH = 800
HEIGHT = 600
best_score = 0		# Maybe should be set to 1000?
score = 0
lives = 3			# Only 3 lives?
time = 0.5
started = False		# Have we started playing yet??

#
# Define Python sets to track rock, explosions, and missles. Initialize with empty set.
#

rock_group = set()
explosion_group = set()   # Set of 64 tiled images define explosion, indexed by age.
missile_group = set()

#
# Define Image Information class "ImageInfo"
#

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

#
# Art images library for Spaceship/Asteroids/RiceRocks defined below
# Art assets created by Kim Lathrop, may be freely re-used in non-commercial projects.
# See http://www.linkedin.com/pub/kim-lathrop/8/bb8/b23
#

#
# Debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([WIDTH / 10 * 4, HEIGHT / 10 * 4], [WIDTH / 10 * 8, HEIGHT / 10 * 8])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris1_blue.png")

#
# Nebula images - nebula_brown.png, nebula_blue.png
#
nebula_info = ImageInfo([WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2013.png")

#
# RiceRocks splash image - Clicked to start off program execution.
#
splash_info = ImageInfo([WIDTH / 4, HEIGHT / 4], [WIDTH / 2, HEIGHT / 2])
#splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")
splash_image = simplegui.load_image("http://i.imgur.com/IlRcbPY.png")
#
# Spaceship image
#
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

#
# Missile image - shot1.png, shot2.png, shot3.png
#
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

#
# Asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
#
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

#
# Animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
#
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_orange.png")

#
# Sound assets purchased from http://www.sounddogs.com. Please do not redistribute
#
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

#
# Define helper functions to handle screen actions
#

def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)

def process_sprite_group(sprite_group, canvas):
    remove_set = set()
    for sprite in sprite_group:
        sprite.draw(canvas)
        if sprite.update():
            remove_set.add(sprite)
    if remove_set:
        sprite_group.difference_update(remove_set)

def group_collide(sprite_group, other_sprite):
    remove_set = set()
    for sprite in sprite_group:
        if sprite.collide(other_sprite):
            remove_set.add(sprite)
            explosion_group.add(Sprite(sprite.get_position(), sprite.get_velocity(), 0, 0, explosion_image, explosion_info, explosion_sound))
    if remove_set:
        sprite_group.difference_update(remove_set)
    return len(remove_set)

def group_group_collide(sprite_group_one, sprite_group_two):
    remove_set = set()
    for sprite in sprite_group_one:
        if group_collide(sprite_group_two, sprite) > 0:
            remove_set.add(sprite)
    if remove_set:
        sprite_group_one.difference_update(remove_set)
    return len(remove_set)

#
# Define Spaceship 1 class (Constructing multi-player version)
#

class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
    
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
    
    def update(self):
        # update angle
        self.angle += self.angle_vel
        
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # update velocity
        if self.thrust:
            acc = angle_to_vector(self.angle)
            self.vel[0] += acc[0] * .1
            self.vel[1] += acc[1] * .1
        
        self.vel[0] *= .99
        self.vel[1] *= .99

    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
    
    def increment_angle_vel(self):
        self.angle_vel += .05
    
    def decrement_angle_vel(self):
        self.angle_vel -= .05
    
    def shoot(self):
        global missile_group

        # initialize missile
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0], self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + 6 * forward[0], self.vel[1] + 6 * forward[1]]
        missile_group.add(Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound))
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
#
# Define Spaceship 2 class (for second player)
#

class Ship2:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
    
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
    
    def update(self):
        # Update angle
        self.angle += self.angle_vel
        
        # Update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # Update velocity
        if self.thrust:
            acc = angle_to_vector(self.angle)
            self.vel[0] += acc[0] * .1
            self.vel[1] += acc[1] * .1
        
        self.vel[0] *= .99
        self.vel[1] *= .99

    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
    
    def increment_angle_vel(self):
        self.angle_vel += .05
    
    def decrement_angle_vel(self):
        self.angle_vel -= .05
    
    def shoot(self):
        global missile_group

        # Initialize missile
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0], self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + 6 * forward[0], self.vel[1] + 6 * forward[1]]
        missile_group.add(Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound))
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius

#
# Define the Sprite class
# 

class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
    
    def draw(self, canvas):
        if self.animated:
            canvas.draw_image(self.image, [self.image_center[0] + self.age % self.lifespan * self.image_size[0],
                                           self.image_center[1]], self.image_size, self.pos, self.image_size)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
    
    def update(self):
        # Update angle
        self.angle += self.angle_vel
    
        # Update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT

        # Increment the age of the sprite (Select next tile for image)
        if self.lifespan:
            if self.age > self.lifespan:
                return True
            else:  
                self.age += 1
        return False
    
    def get_position(self):
        return self.pos
    
    def get_velocity(self):
        return self.vel
    
    def get_radius(self):
        return self.radius
    
    def collide(self, other_object):
        return dist(self.pos, other_object.get_position()) <= self.radius + other_object.get_radius()

#
# Key handlers to control ships (Up Arrow, L/R Arrow, & Spacebar(Fire)
#

def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(True)
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()

def keyup(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(False)

#
# Mouse click handlers that reset UI and conditions whether Ricerocks splash image is drawn
#

def click(pos):
    global score, lives, time, started

    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        # Start new game
        score = 0
        lives = 3
        time = 0.5
        soundtrack.rewind()
        missile_sound.rewind()
        ship_thrust_sound.rewind()
        explosion_sound.rewind()
        soundtrack.play()
        started = True		# Game is in play...

def draw(canvas):
    global my_ship, best_score, score, lives, time, started, rock_group, explosion_group, missile_group
    
    # Animiate the nebula background
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], 
                                [WIDTH / 2 + 1.25 * wtime, HEIGHT / 2], [WIDTH - 2.5 * wtime, HEIGHT])
    canvas.draw_image(debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], 
                                [1.25 * wtime, HEIGHT / 2], [2.5 * wtime, HEIGHT])
    
    # Draw user interface and main background screen.
    canvas.draw_text("Lives", [50, 50], 24, "Aqua", 'sans-serif')
    canvas.draw_text("Score", [680, 50], 24, "Aqua", 'sans-serif')
    canvas.draw_text(str(lives), [70, 80], 22, "White", 'sans-serif')
    canvas.draw_text(str(score), [705, 80], 22, "White", 'sans-serif')
    
    # Draw and update ship and sprites
    my_ship.draw(canvas)
    my_ship.update()
    process_sprite_group(rock_group, canvas)
    process_sprite_group(explosion_group, canvas)
    process_sprite_group(missile_group, canvas)
    
    # Ship - asteroids collisions
    numb_collide = group_collide(rock_group, my_ship)
    if numb_collide > 0:
        lives -= numb_collide
    if lives <= 0:
        # Stop game because you ran out of lives
        if best_score < score:
            best_score = score
        started = False
        rock_group = set([])
        explosion_group = set([])
        missile_group = set([])
        my_ship.pos = [WIDTH / 2, HEIGHT / 2]
        my_ship.vel = [0, 0]
        my_ship.thrust = False
        my_ship.angle = 0
        my_ship.angle_vel = 0
        soundtrack.pause()
    
    # Missiles - rocks collides
    score += group_group_collide(missile_group, rock_group)

    # Draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())

    label.set_text("High score: " + str(best_score))

#
# Timer handler that spawns a new asteriod once a second.
#

def rock_spawner():
    global rock_group
    
    # initialize rock
    rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
    rock_vel = [random.random() * .6 - .3 + score / 10, random.random() * .6 - .3 + score / 10]
    rock_avel = random.random() * .2 - .1
    if started and len(rock_group) < 12 and dist(rock_pos, my_ship.get_position()) > 75:
        rock_group.add(Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info))

#
# Initialize the frame for Asteriods game
#
frame = simplegui.create_frame("Asteroids - RiceRocks", WIDTH, HEIGHT)

#
# Initialize and place ship
#
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

#
# Register handlers
#
label = frame.add_label("High score: ")
frame.set_keyup_handler(keyup)
frame.set_keydown_handler(keydown)
frame.set_mouseclick_handler(click)
frame.set_draw_handler(draw)
timer = simplegui.create_timer(1000.0, rock_spawner)

#
# Start the frame and program timers
#

timer.start()
frame.start()
